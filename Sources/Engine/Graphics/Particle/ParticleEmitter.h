/*=============================================================================
ParticleEmitter.h
Project: Sonata Engine
Author: Julien Delezenne
=============================================================================*/

#ifndef _SE_PARTICLEEMITTER_H_
#define _SE_PARTICLEEMITTER_H_

#include "Core/Object.h"
#include "Core/Range.h"
#include "Core/Scale.h"
#include "Graphics/Materials/ShaderMaterial.h"
#include "Graphics/Particle/Particle.h"
#include "Graphics/Particle/ParticleLocation.h"

namespace SonataEngine
{

class ParticleSystem;
class ParticleTemplate;

/// Particle Coordinate System
enum ParticleCoordinateSystem
{
	ParticleCoordinateSystem_Independent,
	ParticleCoordinateSystem_Relative,
	ParticleCoordinateSystem_Absolute
};

/**
 * Particle Emitter.
 * An emitter is responsible for creating the particles in the system.
 * This is a spatial object an it is owned by a particle system.
 * The particles can be generated by different location shapes.
 */
class ParticleEmitter : public NamedObject
{
public:
	/// Particle list.
	typedef Array<Particle*> ParticleArray;

protected:
	friend class ParticleSystem;
	void SetParticleSystem(ParticleSystem* particleSystem) { _ParticleSystem = particleSystem; }

	void CreateParticle();
	void DestroyParticle(Particle* particle);
	void InitParticle(Particle* particle);

	ParticleSystem* _ParticleSystem;
	real32 _Age;
	real32 _TimeToLive;
	uint32 _ParticleCount;
	uint32 _AliveParticleCount;
	uint32 _DeadParticleCount;
	real32 _EmissionRemainder;

	ParticleTemplate* _ParticleTemplate;
	ShaderMaterial* _shader;
	ParticleArray _Particles;

	bool _Enabled;
	bool _Looped;
	uint32 _MaxParticles;

	ParticleCoordinateSystem _CoordinateSystem;
	RangeVector3 _StartVelocity;
	Vector3 _Acceleration;
	Vector3 _MaxVelocity;
	bool _UseVelocityScale;
	ScaleVector3 _VelocityScale;
	real32 _VelocityScaleRepeats;

	ParticleLocation* _Location;
	Vector3 _PositionOffset;

	RangeReal32 _StartRotation;

	RangeReal32 _InitialTime;
	RangeReal32 _Lifetime;
	RangeReal32 _EmissionRate;

public:
	ParticleEmitter();
	virtual ~ParticleEmitter();

	ParticleSystem* GetParticleSystem() const { return _ParticleSystem; }

	ParticleTemplate* GetParticleTemplate() const { return _ParticleTemplate; }
	void SetParticleTemplate(ParticleTemplate* particleTemplate);

	ShaderMaterial* GetShader() const { return _shader; }

	bool GetEnabled() const { return _Enabled; }
	void SetEnabled(bool enabled) { _Enabled = enabled; }

	bool GetLooped() const { return _Looped; }
	void SetLooped(bool looped) { _Looped = looped; }

	uint32 GetMaxParticles() const { return _MaxParticles; }
	void SetMaxParticles(uint32 maxParticles);

	ParticleCoordinateSystem GetCoordinateSystem() const { return _CoordinateSystem; }
	void SetCoordinateSystem(ParticleCoordinateSystem coordinateSystem) { _CoordinateSystem = coordinateSystem; }

	const RangeVector3& GetStartVelocity() const { return _StartVelocity; }
	void SetStartVelocity(const RangeVector3& startVelocity) { _StartVelocity = startVelocity; }

	const Vector3& GetAcceleration() const { return _Acceleration; }
	void SetAcceleration(const Vector3& acceleration) { _Acceleration = acceleration; }

	const Vector3& GetMaxVelocity() const { return _MaxVelocity; }
	void SetMaxVelocity(const Vector3& maxVelocity) { _MaxVelocity = maxVelocity; }

	bool GetUseVelocityScale() const { return _UseVelocityScale; }
	void SetUseVelocityScale(bool useVelocityScale) { _UseVelocityScale = useVelocityScale; }

	const ScaleVector3& GetVelocityScale() const { return _VelocityScale; }
	void SetVelocityScale(const ScaleVector3& velocityScale) { _VelocityScale = velocityScale; }

	real32 GetVelocityScaleRepeats() const { return _VelocityScaleRepeats; }
	void SetVelocityScaleRepeats(real32 velocityScaleRepeats) { _VelocityScaleRepeats = Math::Max(0.0f, velocityScaleRepeats); }

	ParticleLocation* GetLocation() const { return _Location; }
	void SetLocation(ParticleLocation* location) { _Location = location; }

	const Vector3& GetStartPositionOffset() const { return _PositionOffset; }
	void SetStartPositionOffset(const Vector3& startPositionOffset) { _PositionOffset = startPositionOffset; }

	const RangeReal32& GetLifetime() const { return _Lifetime; }
	void SetLifetime(const RangeReal32& lifetime) { _Lifetime = lifetime; }

	const RangeReal32& GetEmissionRate() const { return _EmissionRate; }
	void SetEmissionRate(const RangeReal32& emissionRate) { _EmissionRate = emissionRate; }

	const ParticleArray& GetParticles() const { return _Particles; }

	void Initialize();

	virtual void Update(const TimeValue& timeValue);

	virtual void Render();
};

}

#endif 
